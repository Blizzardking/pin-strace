# If the tool is built out of the kit, PIN_ROOT must be specified in the make invocation and point to the kit root.
ifdef PIN_ROOT
    CONFIG_ROOT := $(PIN_ROOT)/source/tools/Config
else
    CONFIG_ROOT := ../Config
endif

# These definitions are generated by the kit builder
KIT := 1
COMPILER := gcc
TARGET_OS := linux
DEBUG := 1
##############################################################
#
# This file defines (indirectly via include files) all the variables necessary for building tools and running tests.
# A detailed list of the variables defined in each file is available below.
#
# In addition, this files defines the common make targets.
# 
# All aforementioned variables can be overridden from the command line, however it is not recommended to do so.
# In order to safely obtain more control over the build process, the user may define the following variables in
# the command line:
#
# PIN_ROOT      - Specify the location for the Pin kit when building a tool outside of the kit.
# CC            - Override the default c compiler for tools.
# CXX           - Override the default c++ compiler for tools
# APP_CC        - Override the default c compiler for applications and any additional object or shared object files.
#                 If not defined, APP_CC will be the same as CC.
# APP_CXX       - Override the default c++ compiler for applications and any additional object or shared object files.
#                 If not defined, APP_CXX will be the same as CXX.
# TARGET        - Override the default target architecture e.g. for cross-compilation.
# ICC           - When ICC=1 is specified, the test binaries will be built will be done with the Intel compiler.
# GCCVER        - On Linux, icc requires some utilities from the gcc toolchain. This specifies which gcc version to use.
#                 If a version is not specified, the default system libraries and compiler will be used.
#                 Relevant only on Linux when ICC=1.
# BINUTILS_PATH - Define a path to a different set of binutils for the linker. Relevant on Unix only.
# DEBUG         - When DEBUG=1 is specified, debug information will be generated and no optimizations will be performed.
# PIN_TESTING   - When PIN_TESTING=1 is specified, Pin will be invoked with additional flags which will add some internal
#                 testing. Note that this may incur a performance penalty.
# PINFLAGS      - Use this to add Pin flags when running the tests. Usage: make PINFLAGS=<extra flags> ...
# PROBE         - Override the default check whether to test the probe-mode tests. Specifying PROBE=1 will enable them,
#                 while PROBE=0 will disable them.
# INSTALLER     - Specify a script for adding functionality to the "install" target. The script will run after the entire
#                 build completes successfully.
# INSTALL_FLAGS - Specify command line arguments to be passed to the installer script (see above).
# CMD_PREFIX    - A prefix which will be added to all executed shell commands.
# REMOTE_DEVICE - ID of the remote device tests should run on.
# REMOTE_ROOT   - Location of the kit root directory on the remote device.
#
##############################################################


##############################################################
#
# The following variables are defined in win.vars / unix.vars:
#
# HOST_ARCH         - Architecture of the host system. One of: ia32/intel64/mic.
# TARGET            - Architecture of the target system. This is usually the same as the host.
# BITS              - Pointer size (in bits) of this architecture. One of 32/64.
# OBJDIR            - The output directory for the test rules.
# TARGET_OS         - Operating system of the target.
# OS_TYPE           - One of: unix/win.
# COMPILER          - The compiler used to build Pin. The name of some source trees depend on it. One of: gcc/icc/clang/msvc.
# LINKER            - Linker.
# ARCHIVER          - Static library (archive) builder. Should be followed by the requested archive name.
# ASMBLR            - Assembler.
# OBJDIR            - The output directory for the test rules.
# TARGET_OS         - Operating system of the target.
# OS_TYPE           - One of: unix/win.
# COMPILER          - The compiler used to build Pin. The name of some source trees depend on it. One of: gcc/icc/clang/msvc.
# LINKER            - Linker.
# ARCHIVER          - Static library (archive) builder. Should be followed by the requested archive name.
# ASMBLR            - Assembler.
# EXE_SUFFIX        - Extension of executables (apps).
# OBJ_SUFFIX        - Extension of an object file.
# DLL_SUFFIX        - Extension of a shared object file (dll).
# PINTOOL_SUFFIX    - Extension of a tool.
# SATOOL_SUFFIX     - Extension of static analysis tools.
# LIB_SUFFIX        - Extension of a static library (archive).
# ASM_SUFFIX        - Extension of asm source files (common convention).
# DLL_PREFIX        - Prefix to a shared object's name. This is only relevant on Unix platforms. The prefix is "lib" by
#                     common convention.
# PYTHON            - Define the python executable.
# DIFF              - Diff application.
# CMP               - Compare application used by the default test rule.
# CMD               - Creates a temporary shell for the following command. Relevant on Windows only.
# GREP              - The grep command.
# QGREP             - Quiet grep command - output is suppressed.
# CGREP             - Count number of matching lines.
# EGREP             - Use the grep command with regex support.
# LINECOUNT         - Count the number of lines in the given file.
# BASHTEST          - Equivalent of the bash "test" command.
# STRIP             - Equivalent of the "strip" program.
# SED               - Equivalent of the "sed" program.
# EXPR              - Equivalent of the "expr" program.
# SET_DLL_PATH      - exports the LD_LIBRARY_PATH to point to OBJDIR. Relevant on Unix only.
#
##############################################################


##############################################################
#
# The following variables are defined in makefile.win.config / makefile.unix.config:
#
# ## Output control
#
# COMP_OBJ              - Flags for compiling an object file. Should be followed by the requested output object's name.
# COMP_EXE              - Flags for building an executable from source and object files. Should be followed by the requested
#                         output executable's name.
# LINK_EXE              - Flags for linking an executable from object files. Should be followed by the requested output
#                         executable's name.
#
# ## Special compilation directives
#
# STATIC                - Linker directive for building a static executable.
# NO_RANDOM             - Linker directive which disables voluntary image relocation. Relevant only on Windows since VS2010.
# PIC                   - Compiler directive for generating position independent code. Relevant on Unix platforms.
# NO_PIE                - Compiler directive for building a non-position-independent execuatble. Relevant only on OS X*.
# SSE2                  - Compiler directive for generating sse2 instructions.
# FP387                 - Compiler directive for generating x87 legacy fp code.
# ASMCPP                - Specifies that the following files' language is assembly with embedded c++.
#                       - It is included in ASM_FLAGS (see below). Relevant on Unix platforms.
#
# ## Include paths
#
# COMPONENT_INCLUDES    - Include paths for additional Pin components. This is added to the tools' build rules automatically.
#
# ## Library paths
#
# APP_LPATHS            - Defines the locations of the additional Pin components.
# TOOL_LPATHS           - Defines the locations of the shared libraries needed to link a tool.
# SATOOL_LPATHS         - Defines the locations of the shared libraries needed to link a static analysis tool.
# CXX_LPATHS            - Defines the locations of c++-specific shared libraries.
#
## Libraries to link
#
# APP_LIBS              - Defines some shared objects that may be needed by an application. On Unix platforms this includes
#                         the pthread library.
# DL_LIB                - This defines the library which implements dynamic loading APIs (dl/thr). Relevant only on Unix.
# APP_LIB_ATOMIC        - Link the application with Pin's atomic library. To use this, one must add $(COMPONENT_INCLUDES) to
#                         the compilation rules and $(APP_LPATHS) to the link rule.
# APP_LIB_XED           - Link the application with Xed. To use this, one must add $(COMPONENT_INCLUDES) to the compilation
#                         rules and $(APP_LPATHS) to the link rule.
# TOOL_LIBS             - Defines the libraries needed by the tool.
# SATOOL_LIBS           - Defines the libraries needed by static analysis tools.
# CXX_LIBS              - Defines c++-specific libraries needed by some applications and tools.
#
## Compiler flags
#
# APP_CXXFLAGS          - Application's / object's compiler options. This may include optimization and debugging flags
#                         depending on whether DEBUG=1 was specified.
# APP_CXXFLAGS_NOOPT    - Application's / object's compiler options with no optimizations regardless of the DEBUG flag.
# ASM_FLAGS             - Application's / object's assembler options.
# TOOL_CXXFLAGS         - Tool's compiler options. This may include optimization and debugging flags depending on whether
#                         DEBUG=1 was specified.
# TOOL_CXXFLAGS_NOOPT   - Tool's compiler options with no optimizations regardless of the DEBUG flag.
# DLL_CXXFLAGS          - Flags for compiling a dll. Comes in addition to to other compiler flags like APP_CXXFLAGS.
# ENABLE_DEPRECATED     - Using this flag will suppress compiler warnings when using deprecated Pin APIs.
#
## Linker flags
#
# APP_LDFLAGS           - Application's linker options.
# APP_LDFLAGS_NOOPT     - Application's linker options with no optimizations.
# TOOL_LDFLAGS          - Tool's linker options.
# TOOL_LDFLAGS_NOOPT    - Tool's linker options with no optimizations.
# SATOOL_LDFLAGS        - Static analysis tool's linker options. Relevant on Unix only.
# SATOOL_LDFLAGS_NOOPT  - Static analysis tool's linker options with no optimizations. Relevant on Unix only.
# DLL_LDFLAGS           - Flags for linking a dll. Comes in addition to to other linker flags like APP_LDFLAGS.
#
## Debugging flags
#
# DBG_INFO_CXX          - If DEBUG=1, this variable holds compiler flags for generating debug information. Automatically
#                         included in all the compilation flags e.g. TOOL_CXXFLAGS_NOOPT, APP_CXXFLAGS, etc).
# DBG_INFO_LD           - Same as DBG_INFO_CXX but for linking.
# DBG_INFO_CXX_ALWAYS   - When this is specified in the compilation rule, debug information will be generated regardless of
#                         the value of the DEBUG variable. This is currently disabled on Windows due to some issues with
#                         cygwin/ssh.
# DBG_INFO_LD_ALWAYS    - Same as DBG_INFO_CXX_ALWAYS but for linking.
# DWARF4                - Produce debugging information in DWARF version 4 format. Relevant only on Linux.
#
# ## General
#
# PIN_ROOT              - Path to the Pin root directory. When building from a kit, this is the kit root. When building
#                         from the source tree, this is the Charm directory.
# TOOLS_ROOT            - Path to the Pin tools root directory.
# PIN                   - Pin launcher. When PIN_TESTING=1, this may be followed by some additional flags.
# PINBIN                - The architecture-specific Pin executable. Depends on the value of the TARGET variable.
# PIN32                 - The 32 bit Pin executable.
# PIN64                 - The 32 bit Pin executable.
# PIN_TESTFLAGS         - Additional arguments to Pin when PIN_TESTING=1.
# MAKE_TESTFLAGS        - Additional arguments passed to "make" when running the .test recipes. See makefile.default.rules
#                         for usage.
# INSTALLER             - Default installer (see details at the beginning of this files).
# INSTALL_FLAGS         - Default installer flags (see details at the beginning of this files).
#
# The following variables are defined at the bottom of this file:
#
# APP_CC                - The applications' c compiler. This enables compiling tools and apps with different compilers.
# APP_CXX               - The applications' c++ compiler. This enables compiling tools and apps with different compilers.
# PROBE                 - Enables probe-mode tests when PROBE=1 (default).
# TESTAPP               - Test application used in the default test rule.
# HELLO_APP             - Hello world application which is used by several tests.
# HELLO_APP_DWARF4      - Hello world application which is compiled with dwarf4.
# CHECKAVX              - Small program which checks the hardware for avx support.
# CHECKAVX2             - Small program which checks the hardware for avx2 support.
# CHECKTSX              - Small program which checks the hardware for tsx support.
# THREADLIB             - Thread utilities library used by applications.
# SUPPORTS_AVX_OBJ      - Object file which contains a function for checking avx support. This is used by several files from
#                          a few different directories.
# SUPPORTS_AVX2_OBJ     - Object file which contains a function for checking avx2 support.
# PYCOMPARE             - A comparison script written in python.
#
# The following make targets are defined at the bottom of this file:
#
# all   - Rule for building all the binaries specified in a per-directory makefile.rules file. The make program uses the
#         first rule not preceded by a period "." as the default target. Since we want the "all" target to be the default,
#         it must be specified here (before the per-directory makefile.rules file is called). All the other common make
#         targets are defined in makefile.default.rules.
#
# The following variables and make targets are defined in makefile.default.rules:
#
# dir           - Rule for creating the output directory. Depends on the value of the TARGET variable.
# obj-<arch>    - Rule for building an output directory for a specific architecture.
# tools         - Builds all the tools in the directory.
# apps          - Builds all the applications in the directory.
# objects       - Builds all the objects which were explicitly specified in the directory.
# dlls          - Builds all the dlls in the directory.
# libs          - Builds all the libraries (archives) in the directory.
# avxcheck      - Builds a program which checks for avx support.
# tsxcheck      - Builds a program which checks for tsx support.
# install       - Builds everything in the directory and runs the install script where applicable.
# test          - Runs all the tests in the directory.
# sanity        - Runs the sanity subset of tests in the directory.
# clean         - Cleanup.
# 
# $(OBJDIR)%$(PINTOOL_SUFFIX) - Default rule for building tools.
#    Example: make obj-intel64/mytool.so
#
# $(OBJDIR)% - Default rule for building applications.
#    Example: make obj-intel64/myapp
#
# %.test - Rule for running the default test template.
#    Example: make mytest.test
#
##############################################################


##############################################################
#
# Include files
#
##############################################################

include ./unix.vars
include ./makefile.unix.config


##############################################################
#
# Variable definitions
#
##############################################################

# Define the applications' compiler
APP_CC := $(CC)
APP_CXX := $(CXX)

# Define the test application
TESTAPP := $(TOOLS_ROOT)/Utils/$(OBJDIR)cp-pin$(EXE_SUFFIX)
HELLO_APP := $(TOOLS_ROOT)/Utils/$(OBJDIR)hello$(EXE_SUFFIX)
HELLO_APP_DWARF4 := $(TOOLS_ROOT)/Utils/$(OBJDIR)hello_dwarf4$(EXE_SUFFIX)

# Define the HW check utilities
CHECKAVX := $(TOOLS_ROOT)/Utils/$(OBJDIR)avx_check$(EXE_SUFFIX)
CHECKAVX2 := $(TOOLS_ROOT)/Utils/$(OBJDIR)avx2_check$(EXE_SUFFIX)
CHECKTSX := $(TOOLS_ROOT)/Utils/$(OBJDIR)tsx_check$(EXE_SUFFIX)

# Define the thread utilities library
THREADLIB := $(TOOLS_ROOT)/Utils/$(OBJDIR)threadlib$(OBJ_SUFFIX)

# Define the regval utilities library
REGVALLIB := $(TOOLS_ROOT)/Utils/$(OBJDIR)regvallib$(LIB_SUFFIX)

# Common object files
SUPPORTS_AVX_OBJ := $(TOOLS_ROOT)/Utils/$(OBJDIR)supports_avx$(OBJ_SUFFIX)
SUPPORTS_AVX2_OBJ := $(TOOLS_ROOT)/Utils/$(OBJDIR)supports_avx2$(OBJ_SUFFIX)

# Python comparison script
PYCOMPARE := $(PYTHON) $(TOOLS_ROOT)/Utils/compare.py

##############################################################
#
# Default make target
#
##############################################################

# Build everything.
all: objects libs dlls apps tools

# Accelerate the make process and prevent errors.
.PHONY: all
##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
# TEST_TOOL_ROOTS := inscount0 inscount1 inscount2 proccount imageload staticcount detach malloctrace \
                   malloc_mt inscount_tls stack-debugger pinatrace itrace isampling safecopy invocation \
                   countreps nonstatica
TEST_TOOL_ROOTS :=
# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
# APP_ROOTS := fibonacci little_malloc thread_app
APP_ROOTS :=
# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place probe mode tests here ######
# ifeq ($(PROBE),1)
#    TEST_TOOL_ROOTS += replacesigprobed
# endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
#    TEST_TOOL_ROOTS += buffer_linux fork_jit_tool follow_child_tool strace emudiv
    TEST_TOOL_ROOTS += strace
#    TEST_ROOTS += statica
#    SA_TOOL_ROOTS += statica
#    APP_ROOTS += 
endif

# Mac
ifeq ($(TARGET_OS),mac)
    TEST_TOOL_ROOTS += fork_jit_tool follow_child_tool strace
    TEST_ROOTS += statica
    SA_TOOL_ROOTS += statica
    APP_ROOTS += fork_app follow_child_app1 follow_child_app2
endif

# Windows
ifeq ($(TARGET_OS),windows)
    TEST_TOOL_ROOTS += w_malloctrace buffer_windows emudiv
    APP_ROOTS += divide_by_zero
endif

###### Handle exceptions here ######

# TODO: These tests fail - fix and remove the following:
# See Mantis 2963
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out nonstatica emudiv, $(TEST_TOOL_ROOTS))
    TEST_ROOTS := $(filter-out statica, $(TEST_ROOTS))
    SA_TOOL_ROOTS := $(filter-out statica, $(SA_TOOL_ROOTS))
endif


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

inscount_tls.test: $(OBJDIR)inscount_tls$(PINTOOL_SUFFIX) $(OBJDIR)thread_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)inscount_tls$(PINTOOL_SUFFIX) -- $(OBJDIR)thread_app$(EXE_SUFFIX) > $(OBJDIR)inscount_tls.out 2>&1
	$(RM) $(OBJDIR)inscount_tls.out

malloc_mt.test: $(OBJDIR)malloc_mt$(PINTOOL_SUFFIX) $(OBJDIR)thread_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)malloc_mt$(PINTOOL_SUFFIX) -- $(OBJDIR)thread_app$(EXE_SUFFIX) > $(OBJDIR)malloc_mt.out 2>&1
	$(RM) $(OBJDIR)malloc_mt.out

buffer_linux.test: $(OBJDIR)buffer_linux$(PINTOOL_SUFFIX) $(OBJDIR)thread_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)buffer_linux$(PINTOOL_SUFFIX) -- $(OBJDIR)thread_app$(EXE_SUFFIX) > $(OBJDIR)buffer_linux.out 2>&1
	$(RM) $(OBJDIR)buffer_linux.out

buffer_windows.test: $(OBJDIR)buffer_windows$(PINTOOL_SUFFIX) $(OBJDIR)thread_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)buffer_windows$(PINTOOL_SUFFIX) -emit 0 \
	  -- $(OBJDIR)thread_app$(EXE_SUFFIX) > $(OBJDIR)buffer_windows.out 2>&1
	$(RM) $(OBJDIR)buffer_windows.out

invocation.test: $(OBJDIR)invocation$(PINTOOL_SUFFIX) $(OBJDIR)little_malloc$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)invocation$(PINTOOL_SUFFIX) -- $(OBJDIR)little_malloc$(EXE_SUFFIX) > $(OBJDIR)invocation.out 2>&1
	$(RM) $(OBJDIR)invocation.out

# This tool is tested in "Debugger/makefile". However, leave this line because it is referenced in the user manual.
# The user may invoke make stack-debugger.test to build the tool and app shown in the manual.
# There is an intentional "empty" line which contains a tab character so this "test" will have an empty recipe.
stack-debugger.test: $(OBJDIR)stack-debugger$(PINTOOL_SUFFIX) $(OBJDIR)fibonacci$(EXE_SUFFIX)
	

# stand alone pin tool
statica.test: $(OBJDIR)statica$(SATOOL_SUFFIX)
	$(OBJDIR)statica$(SATOOL_SUFFIX) -i $(OBJDIR)statica$(SATOOL_SUFFIX) > $(OBJDIR)statica.dmp
	$(RM) $(OBJDIR)statica.dmp

emudiv.test: $(OBJDIR)emudiv$(PINTOOL_SUFFIX) $(OBJDIR)divide_by_zero$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)emudiv$(PINTOOL_SUFFIX) -- $(OBJDIR)divide_by_zero$(EXE_SUFFIX) > $(OBJDIR)emudiv.out 2>&1
	$(QGREP) "Caught divide by zero exception" $(OBJDIR)emudiv.out
	$(RM) $(OBJDIR)emudiv.out

fork_jit_tool.test: $(OBJDIR)fork_jit_tool$(PINTOOL_SUFFIX) $(OBJDIR)fork_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)fork_jit_tool$(PINTOOL_SUFFIX) -- $(OBJDIR)fork_app$(EXE_SUFFIX)

follow_child_tool.test: $(OBJDIR)follow_child_tool$(PINTOOL_SUFFIX) $(OBJDIR)follow_child_app1$(EXE_SUFFIX) $(OBJDIR)follow_child_app2$(EXE_SUFFIX)
	$(PIN) -follow_execv 1 -t $(OBJDIR)follow_child_tool$(PINTOOL_SUFFIX) \
	  -- $(OBJDIR)follow_child_app1$(EXE_SUFFIX) $(OBJDIR)follow_child_app2$(EXE_SUFFIX)


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special applications' build rules ######

$(OBJDIR)divide_by_zero$(EXE_SUFFIX): divide_by_zero_$(TARGET_OS).c
	$(APP_CC) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS)

$(OBJDIR)thread_app$(EXE_SUFFIX): thread_$(OS_TYPE).c
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $< $(APP_LDFLAGS) $(APP_LIBS)

##############################################################
#
# This file contains the following:
# 1. All the common make targets which depend on the variables defined
#    in the per-directory makefile.rules files. The independent targets
#    are defined in makefile.config in this directory.
# 2. Default rules for building pintools and test applications.
# 3. Default test recipes.
#
##############################################################


##############################################################
#
# make targets
#
##############################################################

###### Finalize definitions - add prefixes and suffixes ######

TESTS := $(TEST_TOOL_ROOTS:%=%.wrap) $(TEST_ROOTS:%=%.wrap)
SANITY := $(SANITY_SUBSET:%=%.wrap)
TOOLS := $(TEST_TOOL_ROOTS:%=$(OBJDIR)%$(PINTOOL_SUFFIX)) $(TOOL_ROOTS:%=$(OBJDIR)%$(PINTOOL_SUFFIX))
SA_TOOLS := $(SA_TOOL_ROOTS:%=$(OBJDIR)%)
APPS := $(APP_ROOTS:%=$(OBJDIR)%$(EXE_SUFFIX))
OBJECTS := $(OBJECT_ROOTS:%=$(OBJDIR)%$(OBJ_SUFFIX))
DLLS := $(DLL_ROOTS:%=$(OBJDIR)$(DLL_PREFIX)%$(DLL_SUFFIX))
LIBS := $(LIB_ROOTS:%=$(OBJDIR)%$(LIB_SUFFIX))

###### Create the output directory ######

# Create the output directory.
dir: $(OBJDIR)

obj-%:
	mkdir -p $@

# Add the output directory as an order-only dependency to all the binaries and tests.
# Order-only dependencies are all the dependencies that follow the "|" character.
# These dependencies do not mandate rebuilding the target if the dependency changed,
# only that the dependended-on file exists.
# In this case, we require that $(OBJDIR) exist, but we don't care if it has changed.
$(TESTS) $(SANITY): %: | dir
$(TOOLS) $(TOOLS:%$(PINTOOL_SUFFIX)=%$(OBJ_SUFFIX)) $(SA_TOOLS) $(SA_TOOLS:%=%$(OBJ_SUFFIX)): %: | dir
$(APPS) $(OBJECTS) $(DLLS) $(LIBS): %: | dir

###### Build ######

# Build the tools.
tools: dir $(TOOLS) $(SA_TOOLS)

# Build the applications.
apps: dir $(APPS)

# Build the additional object files.
objects: dir $(OBJECTS)

# Build the additional dlls.
dlls: dir $(DLLS)

# Build the static libraries.
libs: dir $(LIBS)

# Build the program which checks the hardware for avx support.
avxcheck: $(CHECKAVX)

# Build the program which checks the hardware for avx2 support.
avx2check: $(CHECKAVX2)

# Build the program which checks the hardware for tsx support.
tsxcheck: $(CHECKTSX)

###### Install ######

# On certain machines (e.g. mic, android), this would also copy the binaries to the remote target.
install: all
	$(INSTALLER) $(INSTALL_FLAGS)
	@echo install complete!

###### Test ######

# Run all tests.
test: $(TESTS)

# Run the "short" sanity list. 
sanity: $(SANITY)

summary:
	$(TOOLS_ROOT)/Utils/testsummary

###### Cleanup ######

# Remove any files that were created by the make process.
clean:
	-rm -rf $(OBJDIR) *.out* *.log* *.xml *.makefile.copy *.core core.*

clean-remote:
	-$(INSTALLER) $(INSTALL_FLAGS) --clean

###### Build the common components - for internal use ###### 

$(TESTAPP):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)cp-pin$(EXE_SUFFIX)

$(HELLO_APP):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)hello$(EXE_SUFFIX)

$(HELLO_APP_DWARF4):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)hello_dwarf4$(EXE_SUFFIX)

$(CHECKAVX):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)avx_check$(EXE_SUFFIX)

$(CHECKAVX2):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)avx2_check$(EXE_SUFFIX)

$(CHECKTSX):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)tsx_check$(EXE_SUFFIX)

$(THREADLIB):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)threadlib$(OBJ_SUFFIX)

$(REGVALLIB):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)regvallib$(LIB_SUFFIX)

$(SUPPORTS_AVX_OBJ):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)supports_avx$(OBJ_SUFFIX)

$(SUPPORTS_AVX2_OBJ):
	$(MAKE) -C $(TOOLS_ROOT)/Utils dir $(OBJDIR)supports_avx2$(OBJ_SUFFIX)

###### Automated testing utilities - for internal use ######

$(OBJDIR)%.tested:
	touch $@

$(OBJDIR)%.failed:
	touch $@

# Prevent these from being deleted if the test recipe fails.
.PRECIOUS: $(OBJDIR)%.tested $(OBJDIR)%.failed

# Don't delete the files generated in the Utils directory.
.PRECIOUS: $(TESTAPP) $(CHECKAVX) $(CHECKAVX2) $(CHECKTSX) $(THREADLIB)
.PRECIOUS: $(SUPPORTS_AVX_OBJ) $(SUPPORTS_AVX2_OBJ)

# Accelerate the make process and prevent errors.
.PHONY: tools apps objects dlls libs avxcheck tsxcheck install test sanity summary clean %.test %.wrap

##############################################################
#
# Default build rules
#
##############################################################

###### Default build rules for tools ######
DEFS := -DHAVE_CONFIG_H
# Build the intermediate object file.
$(OBJDIR)%$(OBJ_SUFFIX): %.cpp
	$(CXX) $(DEFS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)%$(OBJ_SUFFIX): %.c
	$(CC) $(DEFS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<
MY_STRACE_ROOTS := aio bjm block count desc \
    fanotify file inotify io ioctl ioprio ipc \
    kexec keyctl ldt loop mem mtd net pathtrace \
    process ptp quota reboot resource scsi signal \
    sock stream system syscall term time util vsprintf
MY_STRACE_OBJS := $(MY_STRACE_ROOTS:%=$(OBJDIR)%$(OBJ_SUFFIX))
# Build the tool as a dll (shared object).
$(OBJDIR)%$(PINTOOL_SUFFIX): $(MY_STRACE_OBJS) $(OBJDIR)%$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)
	echo $@ $^ $(DEFS)
# Build the static analysis tools.
$(SA_TOOLS): %: %$(OBJ_SUFFIX)
	$(LINKER) $(SATOOL_LDFLAGS) $(LINK_EXE)$@ $< $(SATOOL_LPATHS) $(SATOOL_LIBS)

# Don't delete the object files and dlls.
.PRECIOUS: $(OBJDIR)%$(OBJ_SUFFIX) $(OBJDIR)%$(PINTOOL_SUFFIX)

###### Default build rules for asm objects ######

# Source and target have the same name.
$(OBJDIR)%$(OBJ_SUFFIX): %$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

# Target name includes the string "_asm".
$(OBJDIR)%_asm$(OBJ_SUFFIX): %$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

# Several source versions depending on architecture.
# Several source versions depending on OS type.
$(OBJDIR)%$(OBJ_SUFFIX): %_$(OS_TYPE)$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

# Same as above, but target name includes the string "_asm".
$(OBJDIR)%_asm$(OBJ_SUFFIX): %_$(OS_TYPE)$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

# Several source versions depending on architecture and OS type.
$(OBJDIR)%$(OBJ_SUFFIX): %_$(TARGET)_$(OS_TYPE)$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

# Same as above, but target name includes the string "_asm".
$(OBJDIR)%_asm$(OBJ_SUFFIX): %_$(TARGET)_$(OS_TYPE)$(ASM_SUFFIX)
	$(ASMBLR) $(ASM_FLAGS) $(COMP_OBJ)$@ $<

###### Default build rules for applications ######

$(OBJDIR)%$(EXE_SUFFIX): %.cpp
	$(APP_CXX) $(APP_CXXFLAGS) $(COMP_EXE)$@ $< $(APP_LDFLAGS) $(APP_LIBS) $(CXX_LPATHS) $(CXX_LIBS)

$(OBJDIR)%$(EXE_SUFFIX): %.c
	$(APP_CC) $(APP_CXXFLAGS) $(COMP_EXE)$@ $< $(APP_LDFLAGS) $(APP_LIBS)


##############################################################
#
# Default test recipes
#
##############################################################

###### Default test rules ######

# This wrapper is used by the nightly testing system. No need to use it outside of this file.
%.wrap: $(OBJDIR) $(OBJDIR)%.tested $(OBJDIR)%.failed
	$(MAKE) $(@:.wrap=.test) $(MAKE_TESTFLAGS)
	rm $(OBJDIR)$(@:.wrap=.failed)

# Not all tools produce output so the .out file might not be created. We don't want the test to fail in this case,
# so we ignore possible failures of the final rm command.
%.test: $(OBJDIR) $(OBJDIR)%$(PINTOOL_SUFFIX) $(TESTAPP)
	$(PIN) -t $(OBJDIR)$(@:.test=)$(PINTOOL_SUFFIX) -- $(TESTAPP) makefile $(OBJDIR)$(@:.test=.makefile.copy) \
	  > $(OBJDIR)$(@:.test=.out) 2>&1
	$(CMP) makefile $(OBJDIR)$(@:.test=.makefile.copy)
	$(RM) $(OBJDIR)$(@:.test=.makefile.copy)
	-$(RM) $(OBJDIR)$(@:.test=.out)
